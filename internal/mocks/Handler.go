// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ozonva/ova-promise-api/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Flush provides a mock function with given fields: ctx, promises
func (_m *Handler) Flush(ctx context.Context, promises []domain.Promise) []domain.Promise {
	ret := _m.Called(ctx, promises)

	var r0 []domain.Promise
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Promise) []domain.Promise); ok {
		r0 = rf(ctx, promises)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Promise)
		}
	}

	return r0
}

// PromiseGetByID provides a mock function with given fields: ctx, id
func (_m *Handler) PromiseGetByID(ctx context.Context, id uuid.UUID) (*domain.Promise, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Promise
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Promise); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Promise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromiseGetList provides a mock function with given fields: ctx, limit, offset
func (_m *Handler) PromiseGetList(ctx context.Context, limit uint64, offset uint64) ([]domain.Promise, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []domain.Promise
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []domain.Promise); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Promise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromiseSave provides a mock function with given fields: ctx, promise
func (_m *Handler) PromiseSave(ctx context.Context, promise *domain.Promise) error {
	ret := _m.Called(ctx, promise)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Promise) error); ok {
		r0 = rf(ctx, promise)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PromiseSaveList provides a mock function with given fields: ctx, promises
func (_m *Handler) PromiseSaveList(ctx context.Context, promises []domain.Promise) error {
	ret := _m.Called(ctx, promises)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Promise) error); ok {
		r0 = rf(ctx, promises)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
