// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/ozonva/ova-promise-api/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// TransactionCommit provides a mock function with given fields: ctx, transaction
func (_m *Repository) TransactionCommit(ctx context.Context, transaction usecase.Transaction) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionCreate provides a mock function with given fields: ctx
func (_m *Repository) TransactionCreate(ctx context.Context) (usecase.Transaction, error) {
	ret := _m.Called(ctx)

	var r0 usecase.Transaction
	if rf, ok := ret.Get(0).(func(context.Context) usecase.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRollback provides a mock function with given fields: ctx, transaction
func (_m *Repository) TransactionRollback(ctx context.Context, transaction usecase.Transaction) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
