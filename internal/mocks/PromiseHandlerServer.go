// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	promise "github.com/ozonva/ova-promise-api/internal/implementation/grpc.server/protocol"
	mock "github.com/stretchr/testify/mock"
)

// PromiseHandlerServer is an autogenerated mock type for the PromiseHandlerServer type
type PromiseHandlerServer struct {
	mock.Mock
}

// CreatePromise provides a mock function with given fields: _a0, _a1
func (_m *PromiseHandlerServer) CreatePromise(_a0 context.Context, _a1 *promise.CreateRequest) (*promise.Promise, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func(context.Context, *promise.CreateRequest) *promise.Promise); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *promise.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePromise provides a mock function with given fields: _a0, _a1
func (_m *PromiseHandlerServer) DescribePromise(_a0 context.Context, _a1 *promise.UUID) (*promise.Promise, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func(context.Context, *promise.UUID) *promise.Promise); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *promise.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPromises provides a mock function with given fields: _a0, _a1
func (_m *PromiseHandlerServer) ListPromises(_a0 context.Context, _a1 *promise.ListPromisesRequest) (*promise.ListPromisesRequestResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *promise.ListPromisesRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *promise.ListPromisesRequest) *promise.ListPromisesRequestResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.ListPromisesRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *promise.ListPromisesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePromise provides a mock function with given fields: _a0, _a1
func (_m *PromiseHandlerServer) RemovePromise(_a0 context.Context, _a1 *promise.UUID) (*promise.SuccessMessage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *promise.SuccessMessage
	if rf, ok := ret.Get(0).(func(context.Context, *promise.UUID) *promise.SuccessMessage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.SuccessMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *promise.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromise provides a mock function with given fields: _a0, _a1
func (_m *PromiseHandlerServer) UpdatePromise(_a0 context.Context, _a1 *promise.UpdatePromiseRequest) (*promise.Promise, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *promise.Promise
	if rf, ok := ret.Get(0).(func(context.Context, *promise.UpdatePromiseRequest) *promise.Promise); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promise.Promise)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *promise.UpdatePromiseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedPromiseHandlerServer provides a mock function with given fields:
func (_m *PromiseHandlerServer) mustEmbedUnimplementedPromiseHandlerServer() {
	_m.Called()
}
