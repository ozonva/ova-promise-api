// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package promise

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromiseHandlerClient is the client API for PromiseHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromiseHandlerClient interface {
	CreatePromise(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Promise, error)
	DescribePromise(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Promise, error)
	ListPromises(ctx context.Context, in *ListPromisesRequest, opts ...grpc.CallOption) (*ListPromisesRequestResponse, error)
	RemovePromise(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*SuccessMessage, error)
	UpdatePromise(ctx context.Context, in *UpdatePromiseRequest, opts ...grpc.CallOption) (*Promise, error)
}

type promiseHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewPromiseHandlerClient(cc grpc.ClientConnInterface) PromiseHandlerClient {
	return &promiseHandlerClient{cc}
}

func (c *promiseHandlerClient) CreatePromise(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Promise, error) {
	out := new(Promise)
	err := c.cc.Invoke(ctx, "/promise_grpc.PromiseHandler/CreatePromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseHandlerClient) DescribePromise(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Promise, error) {
	out := new(Promise)
	err := c.cc.Invoke(ctx, "/promise_grpc.PromiseHandler/DescribePromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseHandlerClient) ListPromises(ctx context.Context, in *ListPromisesRequest, opts ...grpc.CallOption) (*ListPromisesRequestResponse, error) {
	out := new(ListPromisesRequestResponse)
	err := c.cc.Invoke(ctx, "/promise_grpc.PromiseHandler/ListPromises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseHandlerClient) RemovePromise(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*SuccessMessage, error) {
	out := new(SuccessMessage)
	err := c.cc.Invoke(ctx, "/promise_grpc.PromiseHandler/RemovePromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promiseHandlerClient) UpdatePromise(ctx context.Context, in *UpdatePromiseRequest, opts ...grpc.CallOption) (*Promise, error) {
	out := new(Promise)
	err := c.cc.Invoke(ctx, "/promise_grpc.PromiseHandler/UpdatePromise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromiseHandlerServer is the server API for PromiseHandler service.
// All implementations must embed UnimplementedPromiseHandlerServer
// for forward compatibility
type PromiseHandlerServer interface {
	CreatePromise(context.Context, *CreateRequest) (*Promise, error)
	DescribePromise(context.Context, *UUID) (*Promise, error)
	ListPromises(context.Context, *ListPromisesRequest) (*ListPromisesRequestResponse, error)
	RemovePromise(context.Context, *UUID) (*SuccessMessage, error)
	UpdatePromise(context.Context, *UpdatePromiseRequest) (*Promise, error)
	mustEmbedUnimplementedPromiseHandlerServer()
}

// UnimplementedPromiseHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedPromiseHandlerServer struct {
}

func (UnimplementedPromiseHandlerServer) CreatePromise(context.Context, *CreateRequest) (*Promise, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromise not implemented")
}
func (UnimplementedPromiseHandlerServer) DescribePromise(context.Context, *UUID) (*Promise, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePromise not implemented")
}
func (UnimplementedPromiseHandlerServer) ListPromises(context.Context, *ListPromisesRequest) (*ListPromisesRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromises not implemented")
}
func (UnimplementedPromiseHandlerServer) RemovePromise(context.Context, *UUID) (*SuccessMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePromise not implemented")
}
func (UnimplementedPromiseHandlerServer) UpdatePromise(context.Context, *UpdatePromiseRequest) (*Promise, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromise not implemented")
}
func (UnimplementedPromiseHandlerServer) mustEmbedUnimplementedPromiseHandlerServer() {}

// UnsafePromiseHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromiseHandlerServer will
// result in compilation errors.
type UnsafePromiseHandlerServer interface {
	mustEmbedUnimplementedPromiseHandlerServer()
}

func RegisterPromiseHandlerServer(s grpc.ServiceRegistrar, srv PromiseHandlerServer) {
	s.RegisterService(&PromiseHandler_ServiceDesc, srv)
}

func _PromiseHandler_CreatePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseHandlerServer).CreatePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise_grpc.PromiseHandler/CreatePromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseHandlerServer).CreatePromise(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseHandler_DescribePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseHandlerServer).DescribePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise_grpc.PromiseHandler/DescribePromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseHandlerServer).DescribePromise(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseHandler_ListPromises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseHandlerServer).ListPromises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise_grpc.PromiseHandler/ListPromises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseHandlerServer).ListPromises(ctx, req.(*ListPromisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseHandler_RemovePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseHandlerServer).RemovePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise_grpc.PromiseHandler/RemovePromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseHandlerServer).RemovePromise(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromiseHandler_UpdatePromise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromiseHandlerServer).UpdatePromise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promise_grpc.PromiseHandler/UpdatePromise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromiseHandlerServer).UpdatePromise(ctx, req.(*UpdatePromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromiseHandler_ServiceDesc is the grpc.ServiceDesc for PromiseHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromiseHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promise_grpc.PromiseHandler",
	HandlerType: (*PromiseHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePromise",
			Handler:    _PromiseHandler_CreatePromise_Handler,
		},
		{
			MethodName: "DescribePromise",
			Handler:    _PromiseHandler_DescribePromise_Handler,
		},
		{
			MethodName: "ListPromises",
			Handler:    _PromiseHandler_ListPromises_Handler,
		},
		{
			MethodName: "RemovePromise",
			Handler:    _PromiseHandler_RemovePromise_Handler,
		},
		{
			MethodName: "UpdatePromise",
			Handler:    _PromiseHandler_UpdatePromise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/implementation/grpc.server/protocol/promise.proto",
}
